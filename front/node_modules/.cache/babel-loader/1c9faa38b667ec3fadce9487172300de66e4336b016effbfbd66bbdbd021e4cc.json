{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{authAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[isLoggedIn,setIsLoggedIn]=useState(false);const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Helper function to safely parse JSON\nconst safeJsonParse=jsonString=>{try{return jsonString?JSON.parse(jsonString):null;}catch(error){console.error('Failed to parse JSON:',error);return null;}};// Helper function to validate user data structure\nconst isValidUserData=userData=>{return userData&&typeof userData==='object'&&userData.id&&userData.email;};// Check if user is already authenticated on app load\nuseEffect(()=>{const token=localStorage.getItem('authToken');const storedUserData=localStorage.getItem('userData');console.log('AuthContext: Initializing authentication state',{hasToken:!!token,hasStoredUserData:!!storedUserData,tokenLength:token?token.length:0});if(token&&storedUserData){const parsedUser=safeJsonParse(storedUserData);if(!isValidUserData(parsedUser)){console.warn('AuthContext: Invalid user data in localStorage, clearing session');localStorage.removeItem('authToken');localStorage.removeItem('userData');setLoading(false);return;}console.log('AuthContext: Valid user data found in localStorage',parsedUser);// First, set the user from localStorage to show UI immediately\nsetUser(parsedUser);setIsLoggedIn(true);setLoading(false);// Then, verify the token with the backend\nconsole.log('AuthContext: Verifying token with backend...');authAPI.getCurrentUser().then(response=>{console.log('AuthContext: Token verification successful',response.data);// Update user data with fresh data from server\nconst freshUserData=response.data.user||response.data;if(isValidUserData(freshUserData)){setUser(freshUserData);localStorage.setItem('userData',JSON.stringify(freshUserData));}else{console.warn('AuthContext: Invalid user data from server, keeping cached data');}}).catch(error=>{console.warn('AuthContext: Token verification failed:',error);// Check if it's a network error vs authentication error\nif(error.response){console.log('AuthContext: Response error status:',error.response.status);if(error.response.status===401){// Token is invalid/expired - clear everything\nconsole.log('AuthContext: Token expired/invalid, clearing session');localStorage.removeItem('authToken');localStorage.removeItem('userData');setUser(null);setIsLoggedIn(false);}}else{// Network error - keep user logged in with cached data\nconsole.log('AuthContext: Network error, keeping cached session');}});}else{console.log('AuthContext: No token or user data found, setting loading to false');setLoading(false);}},[]);const login=async credentials=>{var _data$restriction_det3;try{console.log('AuthContext: Attempting login for email:',credentials.email);const response=await authAPI.login(credentials);const{user,token}=response.data;if(!isValidUserData(user)||!token){console.error('AuthContext: Invalid response from server:',{user,token});throw new Error('Invalid response from server');}console.log('AuthContext: Login successful for user:',user.id);localStorage.setItem('authToken',token);localStorage.setItem('userData',JSON.stringify(user));setUser(user);setIsLoggedIn(true);return{success:true,user};}catch(error){console.error('AuthContext: Login error:',error);// Handle different types of errors\nif(!error.response){// Network error\nreturn{success:false,message:'Network error. Please check your internet connection and try again.'};}const status=error.response.status;const data=error.response.data;switch(status){case 401:return{success:false,message:'Invalid email or password. Please check your credentials and try again.'};case 403:// Handle suspended and deactivated accounts\nif(data.error==='Account deactivated'){var _data$restriction_det;return{success:false,message:(_data$restriction_det=data.restriction_details)!==null&&_data$restriction_det!==void 0&&_data$restriction_det.contact_info?`${data.message}\\n\\n${data.restriction_details.contact_info}`:data.message||'Your account has been deactivated. Please contact support to reactivate your account.',accountStatus:'deactivated',restrictionDetails:data.restriction_details};}if(data.error==='Account suspended'){var _data$restriction_det2;return{success:false,message:(_data$restriction_det2=data.restriction_details)!==null&&_data$restriction_det2!==void 0&&_data$restriction_det2.contact_info?`${data.message}\\n\\n${data.restriction_details.contact_info}`:data.message||'Your account has been suspended. Please contact support.',accountStatus:'suspended',restrictionDetails:data.restriction_details};}return{success:false,message:(_data$restriction_det3=data.restriction_details)!==null&&_data$restriction_det3!==void 0&&_data$restriction_det3.contact_info?`${data.message}\\n\\n${data.restriction_details.contact_info}`:data.message||'Access denied. Please contact support.'};case 422:if(data.errors){return{success:false,message:'Please check your input and try again.',errors:data.errors};}return{success:false,message:data.message||'Please check your input and try again.'};case 429:return{success:false,message:'Too many login attempts. Please wait a moment and try again.'};case 500:return{success:false,message:'Server error. Please try again later.'};case 503:return{success:false,message:'Service temporarily unavailable. Please try again later.'};default:return{success:false,message:data.message||'An unexpected error occurred. Please try again.'};}}};const register=async userData=>{try{console.log('AuthContext: Attempting registration for email:',userData.email);const response=await authAPI.register(userData);const{user,token}=response.data;if(!isValidUserData(user)||!token){console.error('AuthContext: Invalid response from server:',{user,token});throw new Error('Invalid response from server');}console.log('AuthContext: Registration successful for user:',user.id);localStorage.setItem('authToken',token);localStorage.setItem('userData',JSON.stringify(user));setUser(user);setIsLoggedIn(true);return{success:true,user};}catch(error){console.error('AuthContext: Registration error:',error);// Handle different types of errors\nif(!error.response){// Network error\nreturn{success:false,message:'Network error. Please check your internet connection and try again.',errors:{general:['Network error occurred']}};}const status=error.response.status;const data=error.response.data;switch(status){case 422:if(data.errors){// Backend validation errors\nconst processedErrors={};Object.keys(data.errors).forEach(key=>{const errorArray=data.errors[key];processedErrors[key]=Array.isArray(errorArray)?errorArray:[errorArray];});return{success:false,message:'Please correct the errors and try again.',errors:processedErrors};}return{success:false,message:data.message||'Please check your input and try again.',errors:{general:[data.message||'Validation failed']}};case 429:return{success:false,message:'Too many registration attempts. Please wait a moment and try again.',errors:{general:['Too many attempts']}};case 500:return{success:false,message:'Server error. Please try again later.',errors:{general:['Server error occurred']}};case 503:return{success:false,message:'Service temporarily unavailable. Please try again later.',errors:{general:['Service unavailable']}};default:return{success:false,message:data.message||'Registration failed. Please try again.',errors:{general:[data.message||'Registration failed']}};}}};const logout=async()=>{try{// Try to logout from the backend, but don't fail if it doesn't work\nawait authAPI.logout();console.log('AuthContext: Successfully logged out from backend');}catch(error){// Log the error but don't throw it - we'll still clear local session\nconsole.warn('AuthContext: Backend logout failed, but continuing with local logout:',error);// If it's a network error, we still want to logout locally\nif(!error.response||error.response.status>=500){console.log('AuthContext: Network/server error during logout - clearing local session');}}finally{// Always clear local session regardless of API success/failure\nconsole.log('AuthContext: Clearing local session');localStorage.removeItem('authToken');localStorage.removeItem('userData');setUser(null);setIsLoggedIn(false);}};const refreshUserData=async()=>{try{const response=await authAPI.getCurrentUser();const freshUserData=response.data.user||response.data;if(isValidUserData(freshUserData)){setUser(freshUserData);localStorage.setItem('userData',JSON.stringify(freshUserData));return freshUserData;}else{console.warn('Invalid user data received from server');return null;}}catch(error){console.error('Failed to refresh user data:',error);return null;}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isLoggedIn,setIsLoggedIn,user,setUser,loading,login,register,logout,refreshUserData},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsx","_jsx","AuthContext","AuthProvider","_ref","children","isLoggedIn","setIsLoggedIn","user","setUser","loading","setLoading","safeJsonParse","jsonString","JSON","parse","error","console","isValidUserData","userData","id","email","token","localStorage","getItem","storedUserData","log","hasToken","hasStoredUserData","tokenLength","length","parsedUser","warn","removeItem","getCurrentUser","then","response","data","freshUserData","setItem","stringify","catch","status","login","credentials","_data$restriction_det3","Error","success","message","_data$restriction_det","restriction_details","contact_info","accountStatus","restrictionDetails","_data$restriction_det2","errors","register","general","processedErrors","Object","keys","forEach","key","errorArray","Array","isArray","logout","refreshUserData","Provider","value","useAuth"],"sources":["C:/Users/Acer/Downloads/Clients/hulame/front/src/Context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Helper function to safely parse JSON\n  const safeJsonParse = (jsonString) => {\n    try {\n      return jsonString ? JSON.parse(jsonString) : null;\n    } catch (error) {\n      console.error('Failed to parse JSON:', error);\n      return null;\n    }\n  };\n\n  // Helper function to validate user data structure\n  const isValidUserData = (userData) => {\n    return userData && \n           typeof userData === 'object' && \n           userData.id && \n           userData.email;\n  };\n\n  // Check if user is already authenticated on app load\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const storedUserData = localStorage.getItem('userData');\n    \n    console.log('AuthContext: Initializing authentication state', {\n      hasToken: !!token,\n      hasStoredUserData: !!storedUserData,\n      tokenLength: token ? token.length : 0\n    });\n    \n    if (token && storedUserData) {\n      const parsedUser = safeJsonParse(storedUserData);\n      \n      if (!isValidUserData(parsedUser)) {\n        console.warn('AuthContext: Invalid user data in localStorage, clearing session');\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userData');\n        setLoading(false);\n        return;\n      }\n      \n      console.log('AuthContext: Valid user data found in localStorage', parsedUser);\n      \n      // First, set the user from localStorage to show UI immediately\n      setUser(parsedUser);\n      setIsLoggedIn(true);\n      setLoading(false);\n      \n      // Then, verify the token with the backend\n      console.log('AuthContext: Verifying token with backend...');\n      authAPI.getCurrentUser()\n        .then(response => {\n          console.log('AuthContext: Token verification successful', response.data);\n          // Update user data with fresh data from server\n          const freshUserData = response.data.user || response.data;\n          \n          if (isValidUserData(freshUserData)) {\n            setUser(freshUserData);\n            localStorage.setItem('userData', JSON.stringify(freshUserData));\n          } else {\n            console.warn('AuthContext: Invalid user data from server, keeping cached data');\n          }\n        })\n        .catch(error => {\n          console.warn('AuthContext: Token verification failed:', error);\n          \n          // Check if it's a network error vs authentication error\n          if (error.response) {\n            console.log('AuthContext: Response error status:', error.response.status);\n            if (error.response.status === 401) {\n              // Token is invalid/expired - clear everything\n              console.log('AuthContext: Token expired/invalid, clearing session');\n              localStorage.removeItem('authToken');\n              localStorage.removeItem('userData');\n              setUser(null);\n              setIsLoggedIn(false);\n            }\n          } else {\n            // Network error - keep user logged in with cached data\n            console.log('AuthContext: Network error, keeping cached session');\n          }\n        });\n    } else {\n      console.log('AuthContext: No token or user data found, setting loading to false');\n      setLoading(false);\n    }\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      console.log('AuthContext: Attempting login for email:', credentials.email);\n      const response = await authAPI.login(credentials);\n      const { user, token } = response.data;\n      \n      if (!isValidUserData(user) || !token) {\n        console.error('AuthContext: Invalid response from server:', { user, token });\n        throw new Error('Invalid response from server');\n      }\n      \n      console.log('AuthContext: Login successful for user:', user.id);\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(user));\n      setUser(user);\n      setIsLoggedIn(true);\n      \n      return { success: true, user };\n    } catch (error) {\n      console.error('AuthContext: Login error:', error);\n      \n      // Handle different types of errors\n      if (!error.response) {\n        // Network error\n        return { \n          success: false, \n          message: 'Network error. Please check your internet connection and try again.' \n        };\n      }\n      \n      const status = error.response.status;\n      const data = error.response.data;\n      \n      switch (status) {\n        case 401:\n          return { \n            success: false, \n            message: 'Invalid email or password. Please check your credentials and try again.' \n          };\n        case 403:\n          // Handle suspended and deactivated accounts\n          if (data.error === 'Account deactivated') {\n            return {\n              success: false,\n              message: data.restriction_details?.contact_info \n                ? `${data.message}\\n\\n${data.restriction_details.contact_info}`\n                : data.message || 'Your account has been deactivated. Please contact support to reactivate your account.',\n              accountStatus: 'deactivated',\n              restrictionDetails: data.restriction_details\n            };\n          }\n          if (data.error === 'Account suspended') {\n            return {\n              success: false,\n              message: data.restriction_details?.contact_info \n                ? `${data.message}\\n\\n${data.restriction_details.contact_info}`\n                : data.message || 'Your account has been suspended. Please contact support.',\n              accountStatus: 'suspended',\n              restrictionDetails: data.restriction_details\n            };\n          }\n          return {\n            success: false,\n            message: data.restriction_details?.contact_info \n              ? `${data.message}\\n\\n${data.restriction_details.contact_info}`\n              : data.message || 'Access denied. Please contact support.'\n          };\n        case 422:\n          if (data.errors) {\n            return { \n              success: false, \n              message: 'Please check your input and try again.',\n              errors: data.errors \n            };\n          }\n          return { \n            success: false, \n            message: data.message || 'Please check your input and try again.' \n          };\n        case 429:\n          return { \n            success: false, \n            message: 'Too many login attempts. Please wait a moment and try again.' \n          };\n        case 500:\n          return { \n            success: false, \n            message: 'Server error. Please try again later.' \n          };\n        case 503:\n          return { \n            success: false, \n            message: 'Service temporarily unavailable. Please try again later.' \n          };\n        default:\n          return { \n            success: false, \n            message: data.message || 'An unexpected error occurred. Please try again.' \n          };\n      }\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      console.log('AuthContext: Attempting registration for email:', userData.email);\n      const response = await authAPI.register(userData);\n      const { user, token } = response.data;\n      \n      if (!isValidUserData(user) || !token) {\n        console.error('AuthContext: Invalid response from server:', { user, token });\n        throw new Error('Invalid response from server');\n      }\n      \n      console.log('AuthContext: Registration successful for user:', user.id);\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(user));\n      setUser(user);\n      setIsLoggedIn(true);\n      \n      return { success: true, user };\n    } catch (error) {\n      console.error('AuthContext: Registration error:', error);\n      \n      // Handle different types of errors\n      if (!error.response) {\n        // Network error\n        return { \n          success: false, \n          message: 'Network error. Please check your internet connection and try again.',\n          errors: { general: ['Network error occurred'] }\n        };\n      }\n      \n      const status = error.response.status;\n      const data = error.response.data;\n      \n      switch (status) {\n        case 422:\n          if (data.errors) {\n            // Backend validation errors\n            const processedErrors = {};\n            Object.keys(data.errors).forEach(key => {\n              const errorArray = data.errors[key];\n              processedErrors[key] = Array.isArray(errorArray) ? errorArray : [errorArray];\n            });\n            \n            return { \n              success: false, \n              message: 'Please correct the errors and try again.',\n              errors: processedErrors \n            };\n          }\n          return { \n            success: false, \n            message: data.message || 'Please check your input and try again.',\n            errors: { general: [data.message || 'Validation failed'] }\n          };\n        case 429:\n          return { \n            success: false, \n            message: 'Too many registration attempts. Please wait a moment and try again.',\n            errors: { general: ['Too many attempts'] }\n          };\n        case 500:\n          return { \n            success: false, \n            message: 'Server error. Please try again later.',\n            errors: { general: ['Server error occurred'] }\n          };\n        case 503:\n          return { \n            success: false, \n            message: 'Service temporarily unavailable. Please try again later.',\n            errors: { general: ['Service unavailable'] }\n          };\n        default:\n          return { \n            success: false, \n            message: data.message || 'Registration failed. Please try again.',\n            errors: { general: [data.message || 'Registration failed'] }\n          };\n      }\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Try to logout from the backend, but don't fail if it doesn't work\n      await authAPI.logout();\n      console.log('AuthContext: Successfully logged out from backend');\n    } catch (error) {\n      // Log the error but don't throw it - we'll still clear local session\n      console.warn('AuthContext: Backend logout failed, but continuing with local logout:', error);\n      \n      // If it's a network error, we still want to logout locally\n      if (!error.response || error.response.status >= 500) {\n        console.log('AuthContext: Network/server error during logout - clearing local session');\n      }\n    } finally {\n      // Always clear local session regardless of API success/failure\n      console.log('AuthContext: Clearing local session');\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n      setUser(null);\n      setIsLoggedIn(false);\n    }\n  };\n\n  const refreshUserData = async () => {\n    try {\n      const response = await authAPI.getCurrentUser();\n      const freshUserData = response.data.user || response.data;\n      \n      if (isValidUserData(freshUserData)) {\n        setUser(freshUserData);\n        localStorage.setItem('userData', JSON.stringify(freshUserData));\n        return freshUserData;\n      } else {\n        console.warn('Invalid user data received from server');\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to refresh user data:', error);\n      return null;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      isLoggedIn, \n      setIsLoggedIn, \n      user, \n      setUser, \n      loading,\n      login,\n      register,\n      logout,\n      refreshUserData\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n  "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,OAAO,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1C,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAQ,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACW,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAE5C;AACA,KAAM,CAAAe,aAAa,CAAIC,UAAU,EAAK,CACpC,GAAI,CACF,MAAO,CAAAA,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAG,IAAI,CACnD,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAAE,eAAe,CAAIC,QAAQ,EAAK,CACpC,MAAO,CAAAA,QAAQ,EACR,MAAO,CAAAA,QAAQ,GAAK,QAAQ,EAC5BA,QAAQ,CAACC,EAAE,EACXD,QAAQ,CAACE,KAAK,CACvB,CAAC,CAED;AACAvB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAwB,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAC/C,KAAM,CAAAC,cAAc,CAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAEvDP,OAAO,CAACS,GAAG,CAAC,gDAAgD,CAAE,CAC5DC,QAAQ,CAAE,CAAC,CAACL,KAAK,CACjBM,iBAAiB,CAAE,CAAC,CAACH,cAAc,CACnCI,WAAW,CAAEP,KAAK,CAAGA,KAAK,CAACQ,MAAM,CAAG,CACtC,CAAC,CAAC,CAEF,GAAIR,KAAK,EAAIG,cAAc,CAAE,CAC3B,KAAM,CAAAM,UAAU,CAAGnB,aAAa,CAACa,cAAc,CAAC,CAEhD,GAAI,CAACP,eAAe,CAACa,UAAU,CAAC,CAAE,CAChCd,OAAO,CAACe,IAAI,CAAC,kEAAkE,CAAC,CAChFT,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC,CACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC,CACnCtB,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEAM,OAAO,CAACS,GAAG,CAAC,oDAAoD,CAAEK,UAAU,CAAC,CAE7E;AACAtB,OAAO,CAACsB,UAAU,CAAC,CACnBxB,aAAa,CAAC,IAAI,CAAC,CACnBI,UAAU,CAAC,KAAK,CAAC,CAEjB;AACAM,OAAO,CAACS,GAAG,CAAC,8CAA8C,CAAC,CAC3D3B,OAAO,CAACmC,cAAc,CAAC,CAAC,CACrBC,IAAI,CAACC,QAAQ,EAAI,CAChBnB,OAAO,CAACS,GAAG,CAAC,4CAA4C,CAAEU,QAAQ,CAACC,IAAI,CAAC,CACxE;AACA,KAAM,CAAAC,aAAa,CAAGF,QAAQ,CAACC,IAAI,CAAC7B,IAAI,EAAI4B,QAAQ,CAACC,IAAI,CAEzD,GAAInB,eAAe,CAACoB,aAAa,CAAC,CAAE,CAClC7B,OAAO,CAAC6B,aAAa,CAAC,CACtBf,YAAY,CAACgB,OAAO,CAAC,UAAU,CAAEzB,IAAI,CAAC0B,SAAS,CAACF,aAAa,CAAC,CAAC,CACjE,CAAC,IAAM,CACLrB,OAAO,CAACe,IAAI,CAAC,iEAAiE,CAAC,CACjF,CACF,CAAC,CAAC,CACDS,KAAK,CAACzB,KAAK,EAAI,CACdC,OAAO,CAACe,IAAI,CAAC,yCAAyC,CAAEhB,KAAK,CAAC,CAE9D;AACA,GAAIA,KAAK,CAACoB,QAAQ,CAAE,CAClBnB,OAAO,CAACS,GAAG,CAAC,qCAAqC,CAAEV,KAAK,CAACoB,QAAQ,CAACM,MAAM,CAAC,CACzE,GAAI1B,KAAK,CAACoB,QAAQ,CAACM,MAAM,GAAK,GAAG,CAAE,CACjC;AACAzB,OAAO,CAACS,GAAG,CAAC,sDAAsD,CAAC,CACnEH,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC,CACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC,CACnCxB,OAAO,CAAC,IAAI,CAAC,CACbF,aAAa,CAAC,KAAK,CAAC,CACtB,CACF,CAAC,IAAM,CACL;AACAU,OAAO,CAACS,GAAG,CAAC,oDAAoD,CAAC,CACnE,CACF,CAAC,CAAC,CACN,CAAC,IAAM,CACLT,OAAO,CAACS,GAAG,CAAC,oEAAoE,CAAC,CACjFf,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAgC,KAAK,CAAG,KAAO,CAAAC,WAAW,EAAK,KAAAC,sBAAA,CACnC,GAAI,CACF5B,OAAO,CAACS,GAAG,CAAC,0CAA0C,CAAEkB,WAAW,CAACvB,KAAK,CAAC,CAC1E,KAAM,CAAAe,QAAQ,CAAG,KAAM,CAAArC,OAAO,CAAC4C,KAAK,CAACC,WAAW,CAAC,CACjD,KAAM,CAAEpC,IAAI,CAAEc,KAAM,CAAC,CAAGc,QAAQ,CAACC,IAAI,CAErC,GAAI,CAACnB,eAAe,CAACV,IAAI,CAAC,EAAI,CAACc,KAAK,CAAE,CACpCL,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAE,CAAER,IAAI,CAAEc,KAAM,CAAC,CAAC,CAC5E,KAAM,IAAI,CAAAwB,KAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA7B,OAAO,CAACS,GAAG,CAAC,yCAAyC,CAAElB,IAAI,CAACY,EAAE,CAAC,CAC/DG,YAAY,CAACgB,OAAO,CAAC,WAAW,CAAEjB,KAAK,CAAC,CACxCC,YAAY,CAACgB,OAAO,CAAC,UAAU,CAAEzB,IAAI,CAAC0B,SAAS,CAAChC,IAAI,CAAC,CAAC,CACtDC,OAAO,CAACD,IAAI,CAAC,CACbD,aAAa,CAAC,IAAI,CAAC,CAEnB,MAAO,CAAEwC,OAAO,CAAE,IAAI,CAAEvC,IAAK,CAAC,CAChC,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CAEjD;AACA,GAAI,CAACA,KAAK,CAACoB,QAAQ,CAAE,CACnB;AACA,MAAO,CACLW,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,qEACX,CAAC,CACH,CAEA,KAAM,CAAAN,MAAM,CAAG1B,KAAK,CAACoB,QAAQ,CAACM,MAAM,CACpC,KAAM,CAAAL,IAAI,CAAGrB,KAAK,CAACoB,QAAQ,CAACC,IAAI,CAEhC,OAAQK,MAAM,EACZ,IAAK,IAAG,CACN,MAAO,CACLK,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,yEACX,CAAC,CACH,IAAK,IAAG,CACN;AACA,GAAIX,IAAI,CAACrB,KAAK,GAAK,qBAAqB,CAAE,KAAAiC,qBAAA,CACxC,MAAO,CACLF,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CAAAC,qBAAA,CAAAZ,IAAI,CAACa,mBAAmB,UAAAD,qBAAA,WAAxBA,qBAAA,CAA0BE,YAAY,CAC3C,GAAGd,IAAI,CAACW,OAAO,OAAOX,IAAI,CAACa,mBAAmB,CAACC,YAAY,EAAE,CAC7Dd,IAAI,CAACW,OAAO,EAAI,uFAAuF,CAC3GI,aAAa,CAAE,aAAa,CAC5BC,kBAAkB,CAAEhB,IAAI,CAACa,mBAC3B,CAAC,CACH,CACA,GAAIb,IAAI,CAACrB,KAAK,GAAK,mBAAmB,CAAE,KAAAsC,sBAAA,CACtC,MAAO,CACLP,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CAAAM,sBAAA,CAAAjB,IAAI,CAACa,mBAAmB,UAAAI,sBAAA,WAAxBA,sBAAA,CAA0BH,YAAY,CAC3C,GAAGd,IAAI,CAACW,OAAO,OAAOX,IAAI,CAACa,mBAAmB,CAACC,YAAY,EAAE,CAC7Dd,IAAI,CAACW,OAAO,EAAI,0DAA0D,CAC9EI,aAAa,CAAE,WAAW,CAC1BC,kBAAkB,CAAEhB,IAAI,CAACa,mBAC3B,CAAC,CACH,CACA,MAAO,CACLH,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CAAAH,sBAAA,CAAAR,IAAI,CAACa,mBAAmB,UAAAL,sBAAA,WAAxBA,sBAAA,CAA0BM,YAAY,CAC3C,GAAGd,IAAI,CAACW,OAAO,OAAOX,IAAI,CAACa,mBAAmB,CAACC,YAAY,EAAE,CAC7Dd,IAAI,CAACW,OAAO,EAAI,wCACtB,CAAC,CACH,IAAK,IAAG,CACN,GAAIX,IAAI,CAACkB,MAAM,CAAE,CACf,MAAO,CACLR,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,wCAAwC,CACjDO,MAAM,CAAElB,IAAI,CAACkB,MACf,CAAC,CACH,CACA,MAAO,CACLR,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEX,IAAI,CAACW,OAAO,EAAI,wCAC3B,CAAC,CACH,IAAK,IAAG,CACN,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,8DACX,CAAC,CACH,IAAK,IAAG,CACN,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,uCACX,CAAC,CACH,IAAK,IAAG,CACN,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,0DACX,CAAC,CACH,QACE,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEX,IAAI,CAACW,OAAO,EAAI,iDAC3B,CAAC,CACL,CACF,CACF,CAAC,CAED,KAAM,CAAAQ,QAAQ,CAAG,KAAO,CAAArC,QAAQ,EAAK,CACnC,GAAI,CACFF,OAAO,CAACS,GAAG,CAAC,iDAAiD,CAAEP,QAAQ,CAACE,KAAK,CAAC,CAC9E,KAAM,CAAAe,QAAQ,CAAG,KAAM,CAAArC,OAAO,CAACyD,QAAQ,CAACrC,QAAQ,CAAC,CACjD,KAAM,CAAEX,IAAI,CAAEc,KAAM,CAAC,CAAGc,QAAQ,CAACC,IAAI,CAErC,GAAI,CAACnB,eAAe,CAACV,IAAI,CAAC,EAAI,CAACc,KAAK,CAAE,CACpCL,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAE,CAAER,IAAI,CAAEc,KAAM,CAAC,CAAC,CAC5E,KAAM,IAAI,CAAAwB,KAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA7B,OAAO,CAACS,GAAG,CAAC,gDAAgD,CAAElB,IAAI,CAACY,EAAE,CAAC,CACtEG,YAAY,CAACgB,OAAO,CAAC,WAAW,CAAEjB,KAAK,CAAC,CACxCC,YAAY,CAACgB,OAAO,CAAC,UAAU,CAAEzB,IAAI,CAAC0B,SAAS,CAAChC,IAAI,CAAC,CAAC,CACtDC,OAAO,CAACD,IAAI,CAAC,CACbD,aAAa,CAAC,IAAI,CAAC,CAEnB,MAAO,CAAEwC,OAAO,CAAE,IAAI,CAAEvC,IAAK,CAAC,CAChC,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CAExD;AACA,GAAI,CAACA,KAAK,CAACoB,QAAQ,CAAE,CACnB;AACA,MAAO,CACLW,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,qEAAqE,CAC9EO,MAAM,CAAE,CAAEE,OAAO,CAAE,CAAC,wBAAwB,CAAE,CAChD,CAAC,CACH,CAEA,KAAM,CAAAf,MAAM,CAAG1B,KAAK,CAACoB,QAAQ,CAACM,MAAM,CACpC,KAAM,CAAAL,IAAI,CAAGrB,KAAK,CAACoB,QAAQ,CAACC,IAAI,CAEhC,OAAQK,MAAM,EACZ,IAAK,IAAG,CACN,GAAIL,IAAI,CAACkB,MAAM,CAAE,CACf;AACA,KAAM,CAAAG,eAAe,CAAG,CAAC,CAAC,CAC1BC,MAAM,CAACC,IAAI,CAACvB,IAAI,CAACkB,MAAM,CAAC,CAACM,OAAO,CAACC,GAAG,EAAI,CACtC,KAAM,CAAAC,UAAU,CAAG1B,IAAI,CAACkB,MAAM,CAACO,GAAG,CAAC,CACnCJ,eAAe,CAACI,GAAG,CAAC,CAAGE,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,CAAGA,UAAU,CAAG,CAACA,UAAU,CAAC,CAC9E,CAAC,CAAC,CAEF,MAAO,CACLhB,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,0CAA0C,CACnDO,MAAM,CAAEG,eACV,CAAC,CACH,CACA,MAAO,CACLX,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEX,IAAI,CAACW,OAAO,EAAI,wCAAwC,CACjEO,MAAM,CAAE,CAAEE,OAAO,CAAE,CAACpB,IAAI,CAACW,OAAO,EAAI,mBAAmB,CAAE,CAC3D,CAAC,CACH,IAAK,IAAG,CACN,MAAO,CACLD,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,qEAAqE,CAC9EO,MAAM,CAAE,CAAEE,OAAO,CAAE,CAAC,mBAAmB,CAAE,CAC3C,CAAC,CACH,IAAK,IAAG,CACN,MAAO,CACLV,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,uCAAuC,CAChDO,MAAM,CAAE,CAAEE,OAAO,CAAE,CAAC,uBAAuB,CAAE,CAC/C,CAAC,CACH,IAAK,IAAG,CACN,MAAO,CACLV,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,0DAA0D,CACnEO,MAAM,CAAE,CAAEE,OAAO,CAAE,CAAC,qBAAqB,CAAE,CAC7C,CAAC,CACH,QACE,MAAO,CACLV,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEX,IAAI,CAACW,OAAO,EAAI,wCAAwC,CACjEO,MAAM,CAAE,CAAEE,OAAO,CAAE,CAACpB,IAAI,CAACW,OAAO,EAAI,qBAAqB,CAAE,CAC7D,CAAC,CACL,CACF,CACF,CAAC,CAED,KAAM,CAAAkB,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,GAAI,CACF;AACA,KAAM,CAAAnE,OAAO,CAACmE,MAAM,CAAC,CAAC,CACtBjD,OAAO,CAACS,GAAG,CAAC,mDAAmD,CAAC,CAClE,CAAE,MAAOV,KAAK,CAAE,CACd;AACAC,OAAO,CAACe,IAAI,CAAC,uEAAuE,CAAEhB,KAAK,CAAC,CAE5F;AACA,GAAI,CAACA,KAAK,CAACoB,QAAQ,EAAIpB,KAAK,CAACoB,QAAQ,CAACM,MAAM,EAAI,GAAG,CAAE,CACnDzB,OAAO,CAACS,GAAG,CAAC,0EAA0E,CAAC,CACzF,CACF,CAAC,OAAS,CACR;AACAT,OAAO,CAACS,GAAG,CAAC,qCAAqC,CAAC,CAClDH,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC,CACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC,CACnCxB,OAAO,CAAC,IAAI,CAAC,CACbF,aAAa,CAAC,KAAK,CAAC,CACtB,CACF,CAAC,CAED,KAAM,CAAA4D,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAArC,OAAO,CAACmC,cAAc,CAAC,CAAC,CAC/C,KAAM,CAAAI,aAAa,CAAGF,QAAQ,CAACC,IAAI,CAAC7B,IAAI,EAAI4B,QAAQ,CAACC,IAAI,CAEzD,GAAInB,eAAe,CAACoB,aAAa,CAAC,CAAE,CAClC7B,OAAO,CAAC6B,aAAa,CAAC,CACtBf,YAAY,CAACgB,OAAO,CAAC,UAAU,CAAEzB,IAAI,CAAC0B,SAAS,CAACF,aAAa,CAAC,CAAC,CAC/D,MAAO,CAAAA,aAAa,CACtB,CAAC,IAAM,CACLrB,OAAO,CAACe,IAAI,CAAC,wCAAwC,CAAC,CACtD,MAAO,KAAI,CACb,CACF,CAAE,MAAOhB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,KAAI,CACb,CACF,CAAC,CAED,mBACEf,IAAA,CAACC,WAAW,CAACkE,QAAQ,EAACC,KAAK,CAAE,CAC3B/D,UAAU,CACVC,aAAa,CACbC,IAAI,CACJC,OAAO,CACPC,OAAO,CACPiC,KAAK,CACLa,QAAQ,CACRU,MAAM,CACNC,eACF,CAAE,CAAA9D,QAAA,CACCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAiE,OAAO,CAAGA,CAAA,GAAM1E,UAAU,CAACM,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}