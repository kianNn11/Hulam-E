{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles as MuiGlobalStyles, internal_serializeStyles as serializeStyles } from '@mui/styled-engine';\nimport useTheme from \"../useTheme/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction wrapGlobalLayer(styles) {\n  const serialized = serializeStyles(styles);\n  if (styles !== serialized && serialized.styles) {\n    if (!serialized.styles.match(/^@layer\\s+[^{]*$/)) {\n      // If the styles are not already wrapped in a layer, wrap them in a global layer.\n      serialized.styles = `@layer global{${serialized.styles}}`;\n    }\n    return serialized;\n  }\n  return styles;\n}\nfunction GlobalStyles(_ref) {\n  let {\n    styles,\n    themeId,\n    defaultTheme = {}\n  } = _ref;\n  const upperTheme = useTheme(defaultTheme);\n  const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\n  let globalStyles = typeof styles === 'function' ? styles(resolvedTheme) : styles;\n  if (resolvedTheme.modularCssLayers) {\n    if (Array.isArray(globalStyles)) {\n      globalStyles = globalStyles.map(styleArg => {\n        if (typeof styleArg === 'function') {\n          return wrapGlobalLayer(styleArg(resolvedTheme));\n        }\n        return wrapGlobalLayer(styleArg);\n      });\n    } else {\n      globalStyles = wrapGlobalLayer(globalStyles);\n    }\n  }\n  return /*#__PURE__*/_jsx(MuiGlobalStyles, {\n    styles: globalStyles\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\r\n   * @ignore\r\n   */\n  defaultTheme: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),\n  /**\r\n   * @ignore\r\n   */\n  themeId: PropTypes.string\n} : void 0;\nexport default GlobalStyles;","map":{"version":3,"names":["React","PropTypes","GlobalStyles","MuiGlobalStyles","internal_serializeStyles","serializeStyles","useTheme","jsx","_jsx","wrapGlobalLayer","styles","serialized","match","_ref","themeId","defaultTheme","upperTheme","resolvedTheme","globalStyles","modularCssLayers","Array","isArray","map","styleArg","process","env","NODE_ENV","propTypes","object","oneOfType","array","func","number","string","bool"],"sources":["C:/Users/User/Desktop/HULAME FINAL FR/front/node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GlobalStyles as MuiGlobalStyles, internal_serializeStyles as serializeStyles } from '@mui/styled-engine';\r\nimport useTheme from \"../useTheme/index.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction wrapGlobalLayer(styles) {\r\n  const serialized = serializeStyles(styles);\r\n  if (styles !== serialized && serialized.styles) {\r\n    if (!serialized.styles.match(/^@layer\\s+[^{]*$/)) {\r\n      // If the styles are not already wrapped in a layer, wrap them in a global layer.\r\n      serialized.styles = `@layer global{${serialized.styles}}`;\r\n    }\r\n    return serialized;\r\n  }\r\n  return styles;\r\n}\r\nfunction GlobalStyles({\r\n  styles,\r\n  themeId,\r\n  defaultTheme = {}\r\n}) {\r\n  const upperTheme = useTheme(defaultTheme);\r\n  const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\r\n  let globalStyles = typeof styles === 'function' ? styles(resolvedTheme) : styles;\r\n  if (resolvedTheme.modularCssLayers) {\r\n    if (Array.isArray(globalStyles)) {\r\n      globalStyles = globalStyles.map(styleArg => {\r\n        if (typeof styleArg === 'function') {\r\n          return wrapGlobalLayer(styleArg(resolvedTheme));\r\n        }\r\n        return wrapGlobalLayer(styleArg);\r\n      });\r\n    } else {\r\n      globalStyles = wrapGlobalLayer(globalStyles);\r\n    }\r\n  }\r\n  return /*#__PURE__*/_jsx(MuiGlobalStyles, {\r\n    styles: globalStyles\r\n  });\r\n}\r\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * @ignore\r\n   */\r\n  defaultTheme: PropTypes.object,\r\n  /**\r\n   * @ignore\r\n   */\r\n  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),\r\n  /**\r\n   * @ignore\r\n   */\r\n  themeId: PropTypes.string\r\n} : void 0;\r\nexport default GlobalStyles;"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,YAAY,IAAIC,eAAe,EAAEC,wBAAwB,IAAIC,eAAe,QAAQ,oBAAoB;AACjH,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,eAAeA,CAACC,MAAM,EAAE;EAC/B,MAAMC,UAAU,GAAGN,eAAe,CAACK,MAAM,CAAC;EAC1C,IAAIA,MAAM,KAAKC,UAAU,IAAIA,UAAU,CAACD,MAAM,EAAE;IAC9C,IAAI,CAACC,UAAU,CAACD,MAAM,CAACE,KAAK,CAAC,kBAAkB,CAAC,EAAE;MAChD;MACAD,UAAU,CAACD,MAAM,GAAG,iBAAiBC,UAAU,CAACD,MAAM,GAAG;IAC3D;IACA,OAAOC,UAAU;EACnB;EACA,OAAOD,MAAM;AACf;AACA,SAASR,YAAYA,CAAAW,IAAA,EAIlB;EAAA,IAJmB;IACpBH,MAAM;IACNI,OAAO;IACPC,YAAY,GAAG,CAAC;EAClB,CAAC,GAAAF,IAAA;EACC,MAAMG,UAAU,GAAGV,QAAQ,CAACS,YAAY,CAAC;EACzC,MAAME,aAAa,GAAGH,OAAO,GAAGE,UAAU,CAACF,OAAO,CAAC,IAAIE,UAAU,GAAGA,UAAU;EAC9E,IAAIE,YAAY,GAAG,OAAOR,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACO,aAAa,CAAC,GAAGP,MAAM;EAChF,IAAIO,aAAa,CAACE,gBAAgB,EAAE;IAClC,IAAIC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;MAC/BA,YAAY,GAAGA,YAAY,CAACI,GAAG,CAACC,QAAQ,IAAI;QAC1C,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;UAClC,OAAOd,eAAe,CAACc,QAAQ,CAACN,aAAa,CAAC,CAAC;QACjD;QACA,OAAOR,eAAe,CAACc,QAAQ,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,YAAY,GAAGT,eAAe,CAACS,YAAY,CAAC;IAC9C;EACF;EACA,OAAO,aAAaV,IAAI,CAACL,eAAe,EAAE;IACxCO,MAAM,EAAEQ;EACV,CAAC,CAAC;AACJ;AACAM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGxB,YAAY,CAACyB,SAAS,CAAC,yBAAyB;EACtF;EACA;EACA;EACA;EACA;AACF;AACA;EACEZ,YAAY,EAAEd,SAAS,CAAC2B,MAAM;EAC9B;AACF;AACA;EACElB,MAAM,EAAET,SAAS,CAAC,sCAAsC4B,SAAS,CAAC,CAAC5B,SAAS,CAAC6B,KAAK,EAAE7B,SAAS,CAAC8B,IAAI,EAAE9B,SAAS,CAAC+B,MAAM,EAAE/B,SAAS,CAAC2B,MAAM,EAAE3B,SAAS,CAACgC,MAAM,EAAEhC,SAAS,CAACiC,IAAI,CAAC,CAAC;EAC1K;AACF;AACA;EACEpB,OAAO,EAAEb,SAAS,CAACgC;AACrB,CAAC,GAAG,KAAK,CAAC;AACV,eAAe/B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}