{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\HULAME FINAL FR\\\\front\\\\src\\\\Context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Helper function to safely parse JSON\n  const safeJsonParse = jsonString => {\n    try {\n      return jsonString ? JSON.parse(jsonString) : null;\n    } catch (error) {\n      console.error('Failed to parse JSON:', error);\n      return null;\n    }\n  };\n\n  // Helper function to validate user data structure\n  const isValidUserData = userData => {\n    return userData && typeof userData === 'object' && userData.id && userData.email;\n  };\n\n  // Check if user is already authenticated on app load\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const storedUserData = localStorage.getItem('userData');\n    console.log('AuthContext: Initializing authentication state', {\n      hasToken: !!token,\n      hasStoredUserData: !!storedUserData,\n      tokenLength: token ? token.length : 0\n    });\n    if (token && storedUserData) {\n      const parsedUser = safeJsonParse(storedUserData);\n      if (!isValidUserData(parsedUser)) {\n        console.warn('AuthContext: Invalid user data in localStorage, clearing session');\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userData');\n        setLoading(false);\n        return;\n      }\n      console.log('AuthContext: Valid user data found in localStorage', parsedUser);\n\n      // First, set the user from localStorage to show UI immediately\n      setUser(parsedUser);\n      setIsLoggedIn(true);\n      setLoading(false);\n\n      // Then, verify the token with the backend\n      console.log('AuthContext: Verifying token with backend...');\n      authAPI.getCurrentUser().then(response => {\n        console.log('AuthContext: Token verification successful', response.data);\n        // Update user data with fresh data from server\n        const freshUserData = response.data.user || response.data;\n        if (isValidUserData(freshUserData)) {\n          setUser(freshUserData);\n          localStorage.setItem('userData', JSON.stringify(freshUserData));\n        } else {\n          console.warn('AuthContext: Invalid user data from server, keeping cached data');\n        }\n      }).catch(error => {\n        console.warn('AuthContext: Token verification failed:', error);\n\n        // Check if it's a network error vs authentication error\n        if (error.response) {\n          console.log('AuthContext: Response error status:', error.response.status);\n          if (error.response.status === 401) {\n            // Token is invalid/expired - clear everything\n            console.log('AuthContext: Token expired/invalid, clearing session');\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('userData');\n            setUser(null);\n            setIsLoggedIn(false);\n          }\n        } else {\n          // Network error - keep user logged in with cached data\n          console.log('AuthContext: Network error, keeping cached session');\n        }\n      });\n    } else {\n      console.log('AuthContext: No token or user data found, setting loading to false');\n      setLoading(false);\n    }\n  }, []);\n  const login = async credentials => {\n    var _data$restriction_det3;\n    try {\n      console.log('AuthContext: Attempting login for email:', credentials.email);\n      const response = await authAPI.login(credentials);\n      const {\n        user,\n        token\n      } = response.data;\n      if (!isValidUserData(user) || !token) {\n        console.error('AuthContext: Invalid response from server:', {\n          user,\n          token\n        });\n        throw new Error('Invalid response from server');\n      }\n      console.log('AuthContext: Login successful for user:', user.id);\n      localStorage.setItem('authToken', token);\n      // Fetch the latest user data from the backend and update context/localStorage\n      await refreshUserData();\n      setIsLoggedIn(true);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      console.error('AuthContext: Login error:', error);\n\n      // Handle different types of errors\n      if (!error.response) {\n        // Network error\n        return {\n          success: false,\n          message: 'Network error. Please check your internet connection and try again.'\n        };\n      }\n      const status = error.response.status;\n      const data = error.response.data;\n      switch (status) {\n        case 401:\n          return {\n            success: false,\n            message: 'Invalid email or password. Please check your credentials and try again.'\n          };\n        case 403:\n          // Handle suspended and deactivated accounts\n          if (data.error === 'Account deactivated') {\n            var _data$restriction_det;\n            return {\n              success: false,\n              message: (_data$restriction_det = data.restriction_details) !== null && _data$restriction_det !== void 0 && _data$restriction_det.contact_info ? `${data.message}\\n\\n${data.restriction_details.contact_info}` : data.message || 'Your account has been deactivated. Please contact support to reactivate your account.',\n              accountStatus: 'deactivated',\n              restrictionDetails: data.restriction_details\n            };\n          }\n          if (data.error === 'Account suspended') {\n            var _data$restriction_det2;\n            return {\n              success: false,\n              message: (_data$restriction_det2 = data.restriction_details) !== null && _data$restriction_det2 !== void 0 && _data$restriction_det2.contact_info ? `${data.message}\\n\\n${data.restriction_details.contact_info}` : data.message || 'Your account has been suspended. Please contact support.',\n              accountStatus: 'suspended',\n              restrictionDetails: data.restriction_details\n            };\n          }\n          return {\n            success: false,\n            message: (_data$restriction_det3 = data.restriction_details) !== null && _data$restriction_det3 !== void 0 && _data$restriction_det3.contact_info ? `${data.message}\\n\\n${data.restriction_details.contact_info}` : data.message || 'Access denied. Please contact support.'\n          };\n        case 422:\n          if (data.errors) {\n            return {\n              success: false,\n              message: 'Please check your input and try again.',\n              errors: data.errors\n            };\n          }\n          return {\n            success: false,\n            message: data.message || 'Please check your input and try again.'\n          };\n        case 429:\n          return {\n            success: false,\n            message: 'Too many login attempts. Please wait a moment and try again.'\n          };\n        case 500:\n          return {\n            success: false,\n            message: 'Server error. Please try again later.'\n          };\n        case 503:\n          return {\n            success: false,\n            message: 'Service temporarily unavailable. Please try again later.'\n          };\n        default:\n          return {\n            success: false,\n            message: data.message || 'An unexpected error occurred. Please try again.'\n          };\n      }\n    }\n  };\n  const register = async userData => {\n    try {\n      console.log('AuthContext: Attempting registration for email:', userData.email);\n      const response = await authAPI.register(userData);\n      const {\n        user,\n        token\n      } = response.data;\n      if (!isValidUserData(user) || !token) {\n        console.error('AuthContext: Invalid response from server:', {\n          user,\n          token\n        });\n        throw new Error('Invalid response from server');\n      }\n      console.log('AuthContext: Registration successful for user:', user.id);\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(user));\n      setUser(user);\n      setIsLoggedIn(true);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      console.error('AuthContext: Registration error:', error);\n\n      // Handle different types of errors\n      if (!error.response) {\n        // Network error\n        return {\n          success: false,\n          message: 'Network error. Please check your internet connection and try again.',\n          errors: {\n            general: ['Network error occurred']\n          }\n        };\n      }\n      const status = error.response.status;\n      const data = error.response.data;\n      switch (status) {\n        case 422:\n          if (data.errors) {\n            // Backend validation errors\n            const processedErrors = {};\n            Object.keys(data.errors).forEach(key => {\n              const errorArray = data.errors[key];\n              processedErrors[key] = Array.isArray(errorArray) ? errorArray : [errorArray];\n            });\n            return {\n              success: false,\n              message: 'Please correct the errors and try again.',\n              errors: processedErrors\n            };\n          }\n          return {\n            success: false,\n            message: data.message || 'Please check your input and try again.',\n            errors: {\n              general: [data.message || 'Validation failed']\n            }\n          };\n        case 429:\n          return {\n            success: false,\n            message: 'Too many registration attempts. Please wait a moment and try again.',\n            errors: {\n              general: ['Too many attempts']\n            }\n          };\n        case 500:\n          return {\n            success: false,\n            message: 'Server error. Please try again later.',\n            errors: {\n              general: ['Server error occurred']\n            }\n          };\n        case 503:\n          return {\n            success: false,\n            message: 'Service temporarily unavailable. Please try again later.',\n            errors: {\n              general: ['Service unavailable']\n            }\n          };\n        default:\n          return {\n            success: false,\n            message: data.message || 'Registration failed. Please try again.',\n            errors: {\n              general: [data.message || 'Registration failed']\n            }\n          };\n      }\n    }\n  };\n  const logout = async () => {\n    try {\n      // Try to logout from the backend, but don't fail if it doesn't work\n      await authAPI.logout();\n      console.log('AuthContext: Successfully logged out from backend');\n    } catch (error) {\n      // Log the error but don't throw it - we'll still clear local session\n      console.warn('AuthContext: Backend logout failed, but continuing with local logout:', error);\n\n      // If it's a network error, we still want to logout locally\n      if (!error.response || error.response.status >= 500) {\n        console.log('AuthContext: Network/server error during logout - clearing local session');\n      }\n    } finally {\n      // Always clear local session regardless of API success/failure\n      console.log('AuthContext: Clearing local session');\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n      setUser(null);\n      setIsLoggedIn(false);\n    }\n  };\n  const refreshUserData = async () => {\n    try {\n      const response = await authAPI.getCurrentUser();\n      const freshUserData = response.data.user || response.data;\n      if (isValidUserData(freshUserData)) {\n        setUser(freshUserData);\n        localStorage.setItem('userData', JSON.stringify(freshUserData));\n        return freshUserData;\n      } else {\n        console.warn('Invalid user data received from server');\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to refresh user data:', error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      setIsLoggedIn,\n      user,\n      setUser,\n      loading,\n      login,\n      register,\n      logout,\n      refreshUserData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"yZDfVBHkRvzBQbg89I5SngvUWfc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","user","setUser","loading","setLoading","safeJsonParse","jsonString","JSON","parse","error","console","isValidUserData","userData","id","email","token","localStorage","getItem","storedUserData","log","hasToken","hasStoredUserData","tokenLength","length","parsedUser","warn","removeItem","getCurrentUser","then","response","data","freshUserData","setItem","stringify","catch","status","login","credentials","_data$restriction_det3","Error","refreshUserData","success","message","_data$restriction_det","restriction_details","contact_info","accountStatus","restrictionDetails","_data$restriction_det2","errors","register","general","processedErrors","Object","keys","forEach","key","errorArray","Array","isArray","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/HULAME FINAL FR/front/src/Context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Helper function to safely parse JSON\r\n  const safeJsonParse = (jsonString) => {\r\n    try {\r\n      return jsonString ? JSON.parse(jsonString) : null;\r\n    } catch (error) {\r\n      console.error('Failed to parse JSON:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Helper function to validate user data structure\r\n  const isValidUserData = (userData) => {\r\n    return userData && \r\n           typeof userData === 'object' && \r\n           userData.id && \r\n           userData.email;\r\n  };\r\n\r\n  // Check if user is already authenticated on app load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken');\r\n    const storedUserData = localStorage.getItem('userData');\r\n    \r\n    console.log('AuthContext: Initializing authentication state', {\r\n      hasToken: !!token,\r\n      hasStoredUserData: !!storedUserData,\r\n      tokenLength: token ? token.length : 0\r\n    });\r\n    \r\n    if (token && storedUserData) {\r\n      const parsedUser = safeJsonParse(storedUserData);\r\n      \r\n      if (!isValidUserData(parsedUser)) {\r\n        console.warn('AuthContext: Invalid user data in localStorage, clearing session');\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userData');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log('AuthContext: Valid user data found in localStorage', parsedUser);\r\n      \r\n      // First, set the user from localStorage to show UI immediately\r\n      setUser(parsedUser);\r\n      setIsLoggedIn(true);\r\n      setLoading(false);\r\n      \r\n      // Then, verify the token with the backend\r\n      console.log('AuthContext: Verifying token with backend...');\r\n      authAPI.getCurrentUser()\r\n        .then(response => {\r\n          console.log('AuthContext: Token verification successful', response.data);\r\n          // Update user data with fresh data from server\r\n          const freshUserData = response.data.user || response.data;\r\n          \r\n          if (isValidUserData(freshUserData)) {\r\n            setUser(freshUserData);\r\n            localStorage.setItem('userData', JSON.stringify(freshUserData));\r\n          } else {\r\n            console.warn('AuthContext: Invalid user data from server, keeping cached data');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.warn('AuthContext: Token verification failed:', error);\r\n          \r\n          // Check if it's a network error vs authentication error\r\n          if (error.response) {\r\n            console.log('AuthContext: Response error status:', error.response.status);\r\n            if (error.response.status === 401) {\r\n              // Token is invalid/expired - clear everything\r\n              console.log('AuthContext: Token expired/invalid, clearing session');\r\n              localStorage.removeItem('authToken');\r\n              localStorage.removeItem('userData');\r\n              setUser(null);\r\n              setIsLoggedIn(false);\r\n            }\r\n          } else {\r\n            // Network error - keep user logged in with cached data\r\n            console.log('AuthContext: Network error, keeping cached session');\r\n          }\r\n        });\r\n    } else {\r\n      console.log('AuthContext: No token or user data found, setting loading to false');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      console.log('AuthContext: Attempting login for email:', credentials.email);\r\n      const response = await authAPI.login(credentials);\r\n      const { user, token } = response.data;\r\n      \r\n      if (!isValidUserData(user) || !token) {\r\n        console.error('AuthContext: Invalid response from server:', { user, token });\r\n        throw new Error('Invalid response from server');\r\n      }\r\n      \r\n      console.log('AuthContext: Login successful for user:', user.id);\r\n      localStorage.setItem('authToken', token);\r\n      // Fetch the latest user data from the backend and update context/localStorage\r\n      await refreshUserData();\r\n      setIsLoggedIn(true);\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      console.error('AuthContext: Login error:', error);\r\n      \r\n      // Handle different types of errors\r\n      if (!error.response) {\r\n        // Network error\r\n        return { \r\n          success: false, \r\n          message: 'Network error. Please check your internet connection and try again.' \r\n        };\r\n      }\r\n      \r\n      const status = error.response.status;\r\n      const data = error.response.data;\r\n      \r\n      switch (status) {\r\n        case 401:\r\n          return { \r\n            success: false, \r\n            message: 'Invalid email or password. Please check your credentials and try again.' \r\n          };\r\n        case 403:\r\n          // Handle suspended and deactivated accounts\r\n          if (data.error === 'Account deactivated') {\r\n            return {\r\n              success: false,\r\n              message: data.restriction_details?.contact_info \r\n                ? `${data.message}\\n\\n${data.restriction_details.contact_info}`\r\n                : data.message || 'Your account has been deactivated. Please contact support to reactivate your account.',\r\n              accountStatus: 'deactivated',\r\n              restrictionDetails: data.restriction_details\r\n            };\r\n          }\r\n          if (data.error === 'Account suspended') {\r\n            return {\r\n              success: false,\r\n              message: data.restriction_details?.contact_info \r\n                ? `${data.message}\\n\\n${data.restriction_details.contact_info}`\r\n                : data.message || 'Your account has been suspended. Please contact support.',\r\n              accountStatus: 'suspended',\r\n              restrictionDetails: data.restriction_details\r\n            };\r\n          }\r\n          return {\r\n            success: false,\r\n            message: data.restriction_details?.contact_info \r\n              ? `${data.message}\\n\\n${data.restriction_details.contact_info}`\r\n              : data.message || 'Access denied. Please contact support.'\r\n          };\r\n        case 422:\r\n          if (data.errors) {\r\n            return { \r\n              success: false, \r\n              message: 'Please check your input and try again.',\r\n              errors: data.errors \r\n            };\r\n          }\r\n          return { \r\n            success: false, \r\n            message: data.message || 'Please check your input and try again.' \r\n          };\r\n        case 429:\r\n          return { \r\n            success: false, \r\n            message: 'Too many login attempts. Please wait a moment and try again.' \r\n          };\r\n        case 500:\r\n          return { \r\n            success: false, \r\n            message: 'Server error. Please try again later.' \r\n          };\r\n        case 503:\r\n          return { \r\n            success: false, \r\n            message: 'Service temporarily unavailable. Please try again later.' \r\n          };\r\n        default:\r\n          return { \r\n            success: false, \r\n            message: data.message || 'An unexpected error occurred. Please try again.' \r\n          };\r\n      }\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      console.log('AuthContext: Attempting registration for email:', userData.email);\r\n      const response = await authAPI.register(userData);\r\n      const { user, token } = response.data;\r\n      \r\n      if (!isValidUserData(user) || !token) {\r\n        console.error('AuthContext: Invalid response from server:', { user, token });\r\n        throw new Error('Invalid response from server');\r\n      }\r\n      \r\n      console.log('AuthContext: Registration successful for user:', user.id);\r\n      localStorage.setItem('authToken', token);\r\n      localStorage.setItem('userData', JSON.stringify(user));\r\n      setUser(user);\r\n      setIsLoggedIn(true);\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      console.error('AuthContext: Registration error:', error);\r\n      \r\n      // Handle different types of errors\r\n      if (!error.response) {\r\n        // Network error\r\n        return { \r\n          success: false, \r\n          message: 'Network error. Please check your internet connection and try again.',\r\n          errors: { general: ['Network error occurred'] }\r\n        };\r\n      }\r\n      \r\n      const status = error.response.status;\r\n      const data = error.response.data;\r\n      \r\n      switch (status) {\r\n        case 422:\r\n          if (data.errors) {\r\n            // Backend validation errors\r\n            const processedErrors = {};\r\n            Object.keys(data.errors).forEach(key => {\r\n              const errorArray = data.errors[key];\r\n              processedErrors[key] = Array.isArray(errorArray) ? errorArray : [errorArray];\r\n            });\r\n            \r\n            return { \r\n              success: false, \r\n              message: 'Please correct the errors and try again.',\r\n              errors: processedErrors \r\n            };\r\n          }\r\n          return { \r\n            success: false, \r\n            message: data.message || 'Please check your input and try again.',\r\n            errors: { general: [data.message || 'Validation failed'] }\r\n          };\r\n        case 429:\r\n          return { \r\n            success: false, \r\n            message: 'Too many registration attempts. Please wait a moment and try again.',\r\n            errors: { general: ['Too many attempts'] }\r\n          };\r\n        case 500:\r\n          return { \r\n            success: false, \r\n            message: 'Server error. Please try again later.',\r\n            errors: { general: ['Server error occurred'] }\r\n          };\r\n        case 503:\r\n          return { \r\n            success: false, \r\n            message: 'Service temporarily unavailable. Please try again later.',\r\n            errors: { general: ['Service unavailable'] }\r\n          };\r\n        default:\r\n          return { \r\n            success: false, \r\n            message: data.message || 'Registration failed. Please try again.',\r\n            errors: { general: [data.message || 'Registration failed'] }\r\n          };\r\n      }\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Try to logout from the backend, but don't fail if it doesn't work\r\n      await authAPI.logout();\r\n      console.log('AuthContext: Successfully logged out from backend');\r\n    } catch (error) {\r\n      // Log the error but don't throw it - we'll still clear local session\r\n      console.warn('AuthContext: Backend logout failed, but continuing with local logout:', error);\r\n      \r\n      // If it's a network error, we still want to logout locally\r\n      if (!error.response || error.response.status >= 500) {\r\n        console.log('AuthContext: Network/server error during logout - clearing local session');\r\n      }\r\n    } finally {\r\n      // Always clear local session regardless of API success/failure\r\n      console.log('AuthContext: Clearing local session');\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('userData');\r\n      setUser(null);\r\n      setIsLoggedIn(false);\r\n    }\r\n  };\r\n\r\n  const refreshUserData = async () => {\r\n    try {\r\n      const response = await authAPI.getCurrentUser();\r\n      const freshUserData = response.data.user || response.data;\r\n      \r\n      if (isValidUserData(freshUserData)) {\r\n        setUser(freshUserData);\r\n        localStorage.setItem('userData', JSON.stringify(freshUserData));\r\n        return freshUserData;\r\n      } else {\r\n        console.warn('Invalid user data received from server');\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to refresh user data:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      isLoggedIn, \r\n      setIsLoggedIn, \r\n      user, \r\n      setUser, \r\n      loading,\r\n      login,\r\n      register,\r\n      logout,\r\n      refreshUserData\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}